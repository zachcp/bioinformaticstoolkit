---
title: "Fastx Utilities"
---

FastX Utilities


# Basic stats


```{ojs}
//| echo: false
//| 
// support functions
invoke = window.__TAURI__.tauri.invoke;
open   = window.__TAURI__.dialog.open;

// use the tauri open to get absolute file paths
async function choosefasta(){
    const selected = open({
        multiple: false,
        filters: [{
            name: 'Fasta',
            extensions: ['fa', 'fasta', 'fna']}]
    });
    return selected
};

async function choosefastq(){
    const selected = open({
        multiple: false,
        filters: [{
            name: 'Fastq',
            extensions: ['fq', 'fastq']}]
    });
    return selected
};

```


```{ojs}
//|  code-fold: true

viewof fasta_stats = Inputs.button(
    "Get Fasta Stats", 
    { 
        value: null, 
        reduce: () => choosefasta().then((fname) => invoke("get_stats", {filename: fname})) 
    });

fasta_stats_realized = (fasta_stats == null) ? "Click Above to Get Fasta Statistics" : fasta_stats
fasta_stats_realized

```

# SeqKit stats

```{ojs}
//|  code-fold: true

viewof fasta_stats_seqkit = Inputs.button(
    "Get Fasta Stats", 
    { 
        value: null, 
        reduce: () => choosefasta().then((fname) => invoke("get_seqstats", {filename: fname})) 
    });


fasta_stats_seqkit_realized = (fasta_stats_seqkit == null) ? "Click Above to Get Fasta Statistics" : fasta_stats_seqkit
fasta_stats_seqkit_realized

```



# Convert Fastq to Fasta


```{ojs}
//|  code-fold: true

viewof convert_stats = Inputs.button(
    "Convert FastQ to Fasta", 
    { 
        value: null, 
        reduce: () => choosefastq()
            .then( function (fqname) {
                let fasta_name = fqname.split(".").slice(0,-1).join(".");
                fasta_name = fasta_name + "_converted.fasta"
                return invoke("convert_fastq_to_fasta_tauri", {input_path: fqname, output_path: fasta_name})})});


convert_stats_realized = (convert_stats == null) ? "Click Above to Convert" : convert_stats
convert_stats_realized

```



# Restriction Enzyme Analysis

Here we search for Restriction enzymes in DNA sequences. The current setup  will return the locations of the match on teh forward sequence.


```{ojs}
//|  code-fold: true

viewof text = Inputs.textarea({label: "DNA For Searching", placeholder: "DNA Goes here", submit: true})

re_sites =  (text == "") ? []: invoke("check_restriction_sites", {sequence: text})
re_sites

```



# RNApkin

Utility that uses [rnapkin](https://github.com/ukmrs/rnapkin),  a rust library that shows RNA secondary structure. Try:

```txt
>fantastic guanine riboswitch
AAUAUAAUAGGAACACUCAUAUAAUCGCGUGGAUAUGGCACGCAAGUUUCUACCGGGCAC
..........(..(.((((.((((..(((((.......)))))..........((((((.
CGUAAAUGUCCGACUAUGGGUGAGCAAUGGAACCGCACGUGUACGGUUUUUUGUGAUAUC
......)))))).....((((((((((((((((((........))))))...........
AGCAUUGCUUGCUCUUUAUUUGAGCGGGCAAUGCUUUUUUUA
..)))))))))))).)))).)))).)..).............
```


```txt
> offsam
0000022222222223333333333333333333333333333333333444444444444444444444444444444
AUAUCCGUUCUUAUCAAGAGAAGCAGAGGGACUGGCCCGACGAUGCUUCAGCAACCAGUGUAAUGGCGAUCAGCCAUGA
.......((((((((....(((((...(((.....)))......)))))(((..(((((...(((((.....))))).)
4444444444555555555555555555555555555522222222222211111111111111111111111111111
CUAAGGUGCUAAAUCCAGCAAGCUCGAACAGCUUGGAAGAUAAGAAGAGACAAAAUCACUGACAAAGUCUUCUUCUUAA
))..)).)))........((((((.....))))))...)))))))).................((((((.((((...))
111111111111
GAGGACUUUUUU
)).))))))...
```

```{ojs}
//|  code-fold: true

viewof rnapkin_params = Inputs.form({
  height: Inputs.range([0, 900], {step: 10, label: "Height", default: 400}),
  angle: Inputs.range([0, 360], {step: 1, label: "Angle", default: 0}),
  bubble_radius: Inputs.range([0, 1], {step: 0.1, label: "Bubble Radius", default: 0.5, visible:false}),
  mirror_x: Inputs.toggle({label: "Flip X", value: false}),
  mirror_y: Inputs.toggle({label: "Flip Y", value: false}),
  color_theme : Inputs.select(["dark", "white", "black", "bright", "default"], {value: "default", label: "Color Theme"})
})


viewof rna_text = Inputs.textarea({label: "RNA For Searching", placeholder: "RNA Napkin", submit: true})
rna_text_realized =  (rna_text == "") ? []: invoke("rnapkin_fn", {sequence: rna_text, height: rnapkin_params.height, color_theme: rnapkin_params.color_theme, mirror_x: rnapkin_params.mirror_x, mirror_y: rnapkin_params.mirror_y, rotation_angle:rnapkin_params.angle, bubble_radius: rnapkin_params.bubble_radius})

svg`${rna_text_realized}`


```

